# Назва нашого workflow, яка буде відображатися на вкладці "Actions" в GitHub
name: Build & Release

# Умова запуску: workflow активується тільки при створенні нового релізу
on:
  release:
    types: [created]

# Завдання (jobs), які будуть виконуватися
jobs:
  build-and-release:
    # --- ДОДАЙТЕ ЦЮ СЕКЦІЮ ДЛЯ ДОЗВОЛІВ ---
    permissions:
      contents: write # Дозвіл на запис (включаючи завантаження артефактів у реліз)
    # -----------------------------------------
    # Використовуємо останню версію Ubuntu для запуску
    runs-on: ubuntu-latest

    # Кроки, які виконує job
    steps:
      # 1. Клонуємо репозиторій
      # Цей крок завантажує код вашого розширення для подальшої роботи
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Налаштовуємо Node.js
      # Це потрібно для використання npm та запуску скриптів з package.json
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20' # Рекомендується використовувати стабільну LTS-версію

      # 3. Встановлюємо залежності
      # Запускає `npm install` для завантаження `web-ext` та інших пакетів
      - name: Install dependencies
        run: npm install

      # 4. Збираємо розширення для Firefox
      # Використовує офіційний інструмент від Mozilla 'web-ext'
      - name: Build for Firefox
        run: npm run build:firefox # Ця команда визначена у вашому package.json

      # 5. Пакуємо розширення для Chrome в .zip архів
      # Chrome Web Store приймає саме .zip файли
      - name: Package for Chrome
        run: zip -r chrome-extension.zip . -x ".git/*" ".github/*" "node_modules/*" "scripts/*" "build/*" "key.pem" "LICENSE" "README.md" "package-lock.json" # Додав виключення package-lock.json, якщо він є

      # 6. Визначаємо шлях до зібраного файлу Firefox
      # Це робить скрипт надійнішим, оскільки назва файлу може змінюватися з версією
      # Також, web-ext створює .zip, а не .xpi напряму, тому шукаємо .zip
      - name: Get Firefox artifact path
        id: get_firefox_path
        run: echo "path=$(ls -1 build/*.zip)" >> $GITHUB_OUTPUT

      # 7. Завантажуємо артефакт для Firefox на сторінку релізу
      - name: Upload Firefox Artifact to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ${{ steps.get_firefox_path.outputs.path }}
          # Перейменовуємо .zip в .xpi для зрозумілості, це стандартне розширення для Firefox
          asset_name: xdAnswers-firefox-${{ github.ref_name }}.xpi
          asset_content_type: application/x-xpinstall

      # 8. Завантажуємо артефакт для Chrome на сторінку релізу
      - name: Upload Chrome Artifact to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./chrome-extension.zip
          asset_name: xdAnswers-chrome-${{ github.ref_name }}.zip
          asset_content_type: application/zip
