# Назва нашого workflow, яка буде відображатися на вкладці "Actions" в GitHub
name: Build & Release Extension

# Умова запуску: workflow активується тільки при створенні нового релізу
on:
  release:
    types: [created]

jobs:
  build-and-release:
    permissions:
      contents: write # Дозвіл на запис (включаючи завантаження артефактів у реліз)
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install

      # Крок для отримання версії з manifest.json
      # Це потрібно, якщо web-ext використовує версію для назви файлу
      - name: Get extension version from manifest
        id: get_version
        run: echo "version=$(jq -r .version manifest.json)" >> $GITHUB_OUTPUT

      - name: Build for Firefox
        run: npm run build:firefox # Ця команда має створювати архів у папці ./build

      # Пакуємо розширення для Chrome
      # Включаємо тільки необхідні файли та папки
      - name: Package for Chrome
        run: |
          mkdir chrome_package
          cp manifest.json chrome_package/
          cp background.js chrome_package/
          cp content.js chrome_package/
          cp popup.html chrome_package/
          cp popup.js chrome_package/
          cp popup.css chrome_package/
          cp -r images chrome_package/
          # Додайте сюди інші файли/папки, якщо вони є частиною розширення
          cd chrome_package
          zip -r ../chrome-extension.zip .
          cd ..

      # Визначаємо шлях до зібраного файлу Firefox (web-ext зазвичай створює .zip)
      # Назва файлу, створеного web-ext, може включати версію
      # Приклад: xdanswers-X.Y.Z.zip
      - name: Get Firefox artifact path
        id: get_firefox_path
        # Шукаємо .zip файл у папці build. Якщо web-ext створює файл з версією,
        # цей ls має його знайти. Якщо web-ext налаштований створювати .xpi, змініть *.zip на *.xpi
        run: |
          firefox_artifact_path=$(ls -1 build/*.zip | head -n 1)
          if [ -z "$firefox_artifact_path" ]; then
            echo "::error::Firefox artifact (.zip) not found in build/ directory."
            exit 1
          fi
          echo "path=$firefox_artifact_path" >> $GITHUB_OUTPUT
          echo "Found Firefox artifact: $firefox_artifact_path"

      - name: Upload Firefox Artifact to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ${{ steps.get_firefox_path.outputs.path }}
          # Використовуємо версію з тегу релізу для назви артефакту
          asset_name: xdAnswers-firefox-${{ github.ref_name }}.xpi 
          asset_content_type: application/x-xpinstall

      - name: Upload Chrome Artifact to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./chrome-extension.zip
          # Використовуємо версію з тегу релізу для назви артефакту
          asset_name: xdAnswers-chrome-${{ github.ref_name }}.zip
          asset_content_type: application/zip
