# Назва нашого workflow
name: Create Release and Upload Assets

# Умова запуску: workflow активується при створенні нового тегу, що починається з "v"
on:
  push:
    tags:
      - 'v*' # Наприклад, v1.0, v1.2.3, v2.0-beta

jobs:
  build-and-release:
    permissions:
      contents: write # Потрібен дозвіл на створення релізу та завантаження файлів
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install

      - name: Build for Firefox
        run: npm run build:firefox # Команда має створювати архів у папці ./build

      - name: Package for Chrome
        run: |
          mkdir chrome_package
          cp manifest.json chrome_package/
          cp background.js chrome_package/
          cp content.js chrome_package/
          cp popup.html chrome_package/
          cp popup.js chrome_package/
          cp popup.css chrome_package/
          cp -r images chrome_package/
          cd chrome_package
          zip -r ../chrome-extension.zip .
          cd ..
      
      # КРОК 1: Створюємо сам реліз на GitHub
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }} # Використовуємо тег, що запустив workflow
          release_name: Release ${{ github.ref_name }} # Назва релізу, напр. "Release v1.0.1"
          draft: false # Якщо true, реліз буде чернеткою
          prerelease: false # Якщо true, реліз буде позначено як "pre-release"

      # Визначаємо шлях до зібраного файлу Firefox
      - name: Get Firefox artifact path
        id: get_firefox_path
        run: |
          firefox_artifact_path=$(find build -maxdepth 1 \( -name "*.zip" -o -name "*.xpi" \) | head -n 1)
          
          if [ -z "$firefox_artifact_path" ]; then
            echo "::error::Firefox artifact (.zip or .xpi) not found in build/ directory."
            echo "--- Directory contents for debugging ---"
            ls -R
            echo "----------------------------------------"
            exit 1
          fi
          
          echo "Found artifact: $firefox_artifact_path"
          echo "path=$firefox_artifact_path" >> $GITHUB_OUTPUT

      # КРОК 2: Завантажуємо артефакт для Firefox у щойно створений реліз
      - name: Upload Firefox Artifact to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # URL для завантаження, отриманий з кроку "Create Release"
          asset_path: ${{ steps.get_firefox_path.outputs.path }}
          asset_name: xdAnswers-firefox-${{ github.ref_name }}.xpi
          asset_content_type: application/x-xpinstall

      # КРОК 3: Завантажуємо артефакт для Chrome у той самий реліз
      - name: Upload Chrome Artifact to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # Використовуємо той самий URL
          asset_path: ./chrome-extension.zip
          asset_name: xdAnswers-chrome-${{ github.ref_name }}.zip
          asset_content_type: application/zip